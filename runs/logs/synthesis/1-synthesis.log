
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/lifo/src/lifo.v
Parsing SystemVerilog input from `/openlane/designs/lifo/src/lifo.v' to AST representation.
Generating RTLIL representation for module `\lifo'.
Warning: Replacing memory \stack with list of registers. See /openlane/designs/lifo/src/lifo.v:51
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/lifo/runs/RUN_2025.08.17_11.46.36/tmp/synthesis/hierarchy.dot'.
Dumping module lifo to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \lifo

3.2. Analyzing design hierarchy..
Top module:  \lifo
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \lifo

5.2. Analyzing design hierarchy..
Top module:  \lifo
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 3 dead cases from process $proc$/openlane/designs/lifo/src/lifo.v:40$15 in module lifo.
Marked 14 switch rules as full_case in process $proc$/openlane/designs/lifo/src/lifo.v:40$15 in module lifo.
Removed a total of 3 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 12 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~13 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
     1/66: $6$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_DATA[7:0]$87
     2/66: $5$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_DATA[7:0]$85
     3/66: $5$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_ADDR[3:0]$84
     4/66: $5$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_ADDR[3:0]$81
     5/66: $5$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_DATA[7:0]$82
     6/66: $4$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_DATA[7:0]$77
     7/66: $4$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_ADDR[3:0]$76
     8/66: $4$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_DATA[7:0]$79
     9/66: $4$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_ADDR[3:0]$78
    10/66: $4$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_DATA[7:0]$75
    11/66: $3$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_DATA[7:0]$68
    12/66: $3$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_ADDR[3:0]$67
    13/66: $3$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:68$3_ADDR[3:0]$65
    14/66: $3$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:68$3_DATA[7:0]$66
    15/66: $3$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_DATA[7:0]$72
    16/66: $3$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_ADDR[3:0]$71
    17/66: $3$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_DATA[7:0]$70
    18/66: $3$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_ADDR[3:0]$69
    19/66: $4$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_DATA[7:0]$60
    20/66: $3$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_DATA[7:0]$58
    21/66: $3$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_ADDR[3:0]$57
    22/66: $3$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:51$1_ADDR[3:0]$53
    23/66: $3$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:51$1_DATA[7:0]$54
    24/66: $2$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:51$1_DATA[7:0]$41
    25/66: $2$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:51$1_ADDR[3:0]$40
    26/66: $2$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_DATA[7:0]$51
    27/66: $2$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_ADDR[3:0]$50
    28/66: $2$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_DATA[7:0]$49
    29/66: $2$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_ADDR[3:0]$48
    30/66: $2$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_DATA[7:0]$47
    31/66: $2$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_ADDR[3:0]$46
    32/66: $2$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:68$3_DATA[7:0]$45
    33/66: $2$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:68$3_ADDR[3:0]$44
    34/66: $2$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_DATA[7:0]$43
    35/66: $2$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_ADDR[3:0]$42
    36/66: $1$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_DATA[7:0]$39
    37/66: $1$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_ADDR[3:0]$38
    38/66: $1$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_DATA[7:0]$37
    39/66: $1$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_ADDR[3:0]$36
    40/66: $1$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_DATA[7:0]$35
    41/66: $1$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_ADDR[3:0]$34
    42/66: $1$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:68$3_DATA[7:0]$33
    43/66: $1$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:68$3_ADDR[3:0]$32
    44/66: $1$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_DATA[7:0]$31
    45/66: $1$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_ADDR[3:0]$30
    46/66: $1$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:51$1_DATA[7:0]$29
    47/66: $1$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:51$1_ADDR[3:0]$28
    48/66: $0\error[0:0]
    49/66: $0\stack[15][7:0]
    50/66: $0\stack[14][7:0]
    51/66: $0\stack[13][7:0]
    52/66: $0\stack[12][7:0]
    53/66: $0\stack[11][7:0]
    54/66: $0\stack[10][7:0]
    55/66: $0\stack[9][7:0]
    56/66: $0\stack[8][7:0]
    57/66: $0\stack[7][7:0]
    58/66: $0\stack[6][7:0]
    59/66: $0\stack[5][7:0]
    60/66: $0\stack[4][7:0]
    61/66: $0\stack[3][7:0]
    62/66: $0\stack[2][7:0]
    63/66: $0\stack[1][7:0]
    64/66: $0\stack[0][7:0]
    65/66: $0\data_out[7:0]
    66/66: $0\top[4:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\lifo.\top' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1142' with positive edge clock and positive level reset.
Creating register for signal `\lifo.\data_out' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1143' with positive edge clock and positive level reset.
Creating register for signal `\lifo.\error' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1144' with positive edge clock and positive level reset.
Creating register for signal `\lifo.\stack[0]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1147' with positive edge clock.
Creating register for signal `\lifo.\stack[1]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1150' with positive edge clock.
Creating register for signal `\lifo.\stack[2]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1153' with positive edge clock.
Creating register for signal `\lifo.\stack[3]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1156' with positive edge clock.
Creating register for signal `\lifo.\stack[4]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1159' with positive edge clock.
Creating register for signal `\lifo.\stack[5]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1162' with positive edge clock.
Creating register for signal `\lifo.\stack[6]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1165' with positive edge clock.
Creating register for signal `\lifo.\stack[7]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1168' with positive edge clock.
Creating register for signal `\lifo.\stack[8]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1171' with positive edge clock.
Creating register for signal `\lifo.\stack[9]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1174' with positive edge clock.
Creating register for signal `\lifo.\stack[10]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1177' with positive edge clock.
Creating register for signal `\lifo.\stack[11]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1180' with positive edge clock.
Creating register for signal `\lifo.\stack[12]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1183' with positive edge clock.
Creating register for signal `\lifo.\stack[13]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1186' with positive edge clock.
Creating register for signal `\lifo.\stack[14]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1189' with positive edge clock.
Creating register for signal `\lifo.\stack[15]' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $dff cell `$procdff$1192' with positive edge clock.
Creating register for signal `\lifo.$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:51$1_ADDR' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1193' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:51$1_DATA' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1194' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_ADDR' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1195' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:59$2_DATA' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1196' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:68$3_ADDR' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1197' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:68$3_DATA' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1198' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_ADDR' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1199' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:69$4_DATA' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1200' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_ADDR' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1201' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_wr$\stack$/openlane/designs/lifo/src/lifo.v:73$5_DATA' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1202' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_ADDR' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1203' with positive edge clock and positive level reset.
Creating register for signal `\lifo.$mem2reg_rd$\stack$/openlane/designs/lifo/src/lifo.v:80$6_DATA' using process `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
  created $adff cell `$procdff$1204' with positive edge clock and positive level reset.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 13 empty switches in `\lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
Removing empty process `lifo.$proc$/openlane/designs/lifo/src/lifo.v:40$15'.
Cleaned up 13 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module lifo...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.
<suppressed ~53 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 119 unused cells and 317 unused wires.
<suppressed ~122 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
<suppressed ~330 debug messages>
Removed a total of 110 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$223.
    dead port 2/2 on $mux $procmux$225.
    dead port 2/2 on $mux $procmux$110.
    dead port 1/2 on $mux $procmux$295.
    dead port 2/2 on $mux $procmux$297.
    dead port 1/2 on $mux $procmux$113.
    dead port 1/2 on $mux $procmux$116.
    dead port 2/2 on $mux $procmux$118.
Removed 8 multiplexer ports.
<suppressed ~19 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lifo.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 0 unused cells and 154 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lifo.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lifo.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1192 ($dff) from module lifo (D = $0\stack[15][7:0], Q = \stack[15]).
Adding EN signal on $procdff$1189 ($dff) from module lifo (D = $0\stack[14][7:0], Q = \stack[14]).
Adding EN signal on $procdff$1186 ($dff) from module lifo (D = $0\stack[13][7:0], Q = \stack[13]).
Adding EN signal on $procdff$1183 ($dff) from module lifo (D = $0\stack[12][7:0], Q = \stack[12]).
Adding EN signal on $procdff$1180 ($dff) from module lifo (D = $0\stack[11][7:0], Q = \stack[11]).
Adding EN signal on $procdff$1177 ($dff) from module lifo (D = $0\stack[10][7:0], Q = \stack[10]).
Adding EN signal on $procdff$1174 ($dff) from module lifo (D = $0\stack[9][7:0], Q = \stack[9]).
Adding EN signal on $procdff$1171 ($dff) from module lifo (D = $0\stack[8][7:0], Q = \stack[8]).
Adding EN signal on $procdff$1168 ($dff) from module lifo (D = $0\stack[7][7:0], Q = \stack[7]).
Adding EN signal on $procdff$1165 ($dff) from module lifo (D = $0\stack[6][7:0], Q = \stack[6]).
Adding EN signal on $procdff$1162 ($dff) from module lifo (D = $0\stack[5][7:0], Q = \stack[5]).
Adding EN signal on $procdff$1159 ($dff) from module lifo (D = $0\stack[4][7:0], Q = \stack[4]).
Adding EN signal on $procdff$1156 ($dff) from module lifo (D = $0\stack[3][7:0], Q = \stack[3]).
Adding EN signal on $procdff$1153 ($dff) from module lifo (D = $0\stack[2][7:0], Q = \stack[2]).
Adding EN signal on $procdff$1150 ($dff) from module lifo (D = $0\stack[1][7:0], Q = \stack[1]).
Adding EN signal on $procdff$1147 ($dff) from module lifo (D = $0\stack[0][7:0], Q = \stack[0]).
Adding EN signal on $procdff$1143 ($adff) from module lifo (D = $0\data_out[7:0], Q = \data_out).
Adding EN signal on $procdff$1142 ($adff) from module lifo (D = $0\top[4:0], Q = \top).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 16 unused cells and 16 unused wires.
<suppressed ~17 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.
<suppressed ~18 debug messages>

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lifo.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
<suppressed ~141 debug messages>
Removed a total of 47 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 0 unused cells and 47 unused wires.
<suppressed ~1 debug messages>

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

24.16. Rerunning OPT passes. (Maybe there is more to do..)

24.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

24.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lifo.
Performed a total of 0 changes.

24.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

24.20. Executing OPT_DFF pass (perform DFF optimizations).

24.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

24.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

24.23. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell lifo.$add$/openlane/designs/lifo/src/lifo.v:52$55 ($add).
Removed top 27 bits (of 32) from port Y of cell lifo.$add$/openlane/designs/lifo/src/lifo.v:52$55 ($add).
Removed top 31 bits (of 32) from port B of cell lifo.$sub$/openlane/designs/lifo/src/lifo.v:59$59 ($sub).
Removed top 27 bits (of 32) from port Y of cell lifo.$sub$/openlane/designs/lifo/src/lifo.v:59$59 ($sub).
Removed top 2 bits (of 4) from port B of cell lifo.$procmux$107_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell lifo.$procmux$108_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell lifo.$procmux$215_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell lifo.$procmux$216_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell lifo.$procmux$217_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell lifo.$procmux$218_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell lifo.$procmux$219_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell lifo.$procmux$663_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell lifo.$procmux$710_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell lifo.$procmux$760_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell lifo.$procmux$813_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell lifo.$procmux$869_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell lifo.$procmux$928_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell lifo.$procmux$1032_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell lifo.$auto$opt_dff.cc:195:make_patterns_logic$1374 ($ne).
Removed top 1 bits (of 2) from port B of cell lifo.$procmux$1118_CMP0 ($eq).
Removed top 27 bits (of 32) from wire lifo.$add$/openlane/designs/lifo/src/lifo.v:52$55_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module lifo:
  creating $macc model for $add$/openlane/designs/lifo/src/lifo.v:52$55 ($add).
  creating $macc model for $sub$/openlane/designs/lifo/src/lifo.v:59$59 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/lifo/src/lifo.v:59$59.
  creating $alu model for $macc $add$/openlane/designs/lifo/src/lifo.v:52$55.
  creating $alu cell for $add$/openlane/designs/lifo/src/lifo.v:52$55: $auto$alumacc.cc:485:replace_alu$1404
  creating $alu cell for $sub$/openlane/designs/lifo/src/lifo.v:59$59: $auto$alumacc.cc:485:replace_alu$1407
  created 2 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lifo.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.
<suppressed ~62 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 0 unused cells and 42 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lifo.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using template $paramod$dc04b7d98e503a7bab16fce2df70e6e2c5ca34d6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using template $paramod$75a16668b548c3bac59647e2f0c7dad55b2b94b9\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$70d30c21ff772b34d0d1da2801fbd781dc3c70e4\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~517 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.
<suppressed ~669 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
<suppressed ~450 debug messages>
Removed a total of 150 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 19 unused cells and 440 unused wires.
<suppressed ~20 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\lifo' to `<abc-temp-dir>/input.blif'..
Extracted 996 gates and 1141 wires to a netlist network with 144 inputs and 162 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              NAND cells:       14
ABC RESULTS:               AND cells:        8
ABC RESULTS:               NOT cells:       14
ABC RESULTS:               NOR cells:       26
ABC RESULTS:               XOR cells:        9
ABC RESULTS:            ANDNOT cells:      192
ABC RESULTS:                OR cells:      175
ABC RESULTS:               MUX cells:      535
ABC RESULTS:        internal signals:      835
ABC RESULTS:           input signals:      144
ABC RESULTS:          output signals:      162
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.
<suppressed ~132 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 1 unused cells and 533 unused wires.
<suppressed ~2 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \lifo

40.2. Analyzing design hierarchy..
Top module:  \lifo
Removed 0 unused modules.

41. Printing statistics.

=== lifo ===

   Number of wires:                873
   Number of wire bits:           1126
   Number of public wires:          26
   Number of public wire bits:     156
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1114
     $_ANDNOT_                     191
     $_AND_                          8
     $_DFFE_PP0P_                   13
     $_DFFE_PP_                    128
     $_DFF_PP0_                      1
     $_MUX_                        535
     $_NAND_                        14
     $_NOR_                         24
     $_NOT_                         13
     $_ORNOT_                        4
     $_OR_                         174
     $_XOR_                          9

42. Executing CHECK pass (checking for obvious problems).
Checking module lifo...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/lifo/runs/RUN_2025.08.17_11.46.36/tmp/synthesis/post_techmap.dot'.
Dumping module lifo to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lifo.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lifo'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lifo.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..

47. Printing statistics.

=== lifo ===

   Number of wires:                873
   Number of wire bits:           1126
   Number of public wires:          26
   Number of public wire bits:     156
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1114
     $_ANDNOT_                     191
     $_AND_                          8
     $_DFFE_PP0P_                   13
     $_DFFE_PP_                    128
     $_DFF_PP0_                      1
     $_MUX_                        535
     $_NAND_                        14
     $_NOR_                         24
     $_NOT_                         13
     $_ORNOT_                        4
     $_OR_                         174
     $_XOR_                          9

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/prormrxcn/.ciel/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/prormrxcn/.ciel/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/prormrxcn/.ciel/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/prormrxcn/.ciel/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\lifo':
  mapped 14 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 128 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== lifo ===

   Number of wires:               1028
   Number of wire bits:           1281
   Number of public wires:          26
   Number of public wire bits:     156
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1269
     $_ANDNOT_                     191
     $_AND_                          8
     $_MUX_                        676
     $_NAND_                        14
     $_NOR_                         24
     $_NOT_                         27
     $_ORNOT_                        4
     $_OR_                         174
     $_XOR_                          9
     sky130_fd_sc_hd__dfrtp_2       14
     sky130_fd_sc_hd__dfxtp_2      128

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\lifo' to `/tmp/yosys-abc-ghbol1/input.blif'..
Extracted 1127 gates and 1279 wires to a netlist network with 152 inputs and 158 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-ghbol1/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-ghbol1/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-ghbol1/input.blif 
ABC: + read_lib -w /openlane/designs/lifo/runs/RUN_2025.08.17_11.46.36/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/lifo/runs/RUN_2025.08.17_11.46.36/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    9.54 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/lifo/runs/RUN_2025.08.17_11.46.36/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/lifo/runs/RUN_2025.08.17_11.46.36/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (2155.40 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    482 ( 36.9 %)   Cap = 12.7 ff (  8.8 %)   Area =     3769.87 ( 63.1 %)   Delay =  2461.05 ps  (  8.1 %)               
ABC: Path  0 --      12 : 0    3 pi                        A =   0.00  Df =  28.9  -17.0 ps  S =  45.7 ps  Cin =  0.0 ff  Cout =   8.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     318 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 217.2  -73.5 ps  S = 200.1 ps  Cin =  2.1 ff  Cout =  16.3 ff  Cmax = 130.0 ff  G =  753  
ABC: Path  2 --     329 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 541.1 -186.5 ps  S = 349.4 ps  Cin =  2.1 ff  Cout =  29.3 ff  Cmax = 130.0 ff  G = 1322  
ABC: Path  3 --     343 : 4   10 sky130_fd_sc_hd__and4bb_2 A =  12.51  Df = 878.4  -96.3 ps  S = 160.0 ps  Cin =  1.5 ff  Cout =  23.3 ff  Cmax = 270.1 ff  G = 1461  
ABC: Path  4 --     345 : 4    1 sky130_fd_sc_hd__a22o_2   A =  10.01  Df =1136.4 -194.1 ps  S =  35.9 ps  Cin =  2.3 ff  Cout =   1.8 ff  Cmax = 301.2 ff  G =   73  
ABC: Path  5 --     353 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =1752.3 -284.3 ps  S =  90.0 ps  Cin =  1.5 ff  Cout =   1.5 ff  Cmax = 310.4 ff  G =   91  
ABC: Path  6 --     354 : 3    1 sky130_fd_sc_hd__or3_2    A =   7.51  Df =2162.3 -607.2 ps  S =  73.3 ps  Cin =  1.5 ff  Cout =   2.5 ff  Cmax = 310.4 ff  G =  155  
ABC: Path  7 --     360 : 4    1 sky130_fd_sc_hd__a22o_2   A =  10.01  Df =2461.0 -680.6 ps  S = 179.8 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 301.2 ff  G = 1424  
ABC: Start-point = pi11 (\top [1]).  End-point = po0 ($auto$rtlil.cc:2607:MuxGate$4730).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  152/  158  lat =    0  nd =   482  edge =   1179  area =3769.31  delay = 9.00  lev = 9
ABC: + write_blif /tmp/yosys-abc-ghbol1/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nor4b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      136
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      161
ABC RESULTS:        internal signals:      969
ABC RESULTS:           input signals:      152
ABC RESULTS:          output signals:      158
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lifo..
Removed 0 unused cells and 1279 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module lifo...
Warning: Wire lifo.\full is used but has no driver.
Warning: Wire lifo.\error is used but has no driver.
Warning: Wire lifo.\empty is used but has no driver.
Warning: Wire lifo.\data_out [7] is used but has no driver.
Warning: Wire lifo.\data_out [6] is used but has no driver.
Warning: Wire lifo.\data_out [5] is used but has no driver.
Warning: Wire lifo.\data_out [4] is used but has no driver.
Warning: Wire lifo.\data_out [3] is used but has no driver.
Warning: Wire lifo.\data_out [2] is used but has no driver.
Warning: Wire lifo.\data_out [1] is used but has no driver.
Warning: Wire lifo.\data_out [0] is used but has no driver.
Found and reported 11 problems.

61. Printing statistics.

=== lifo ===

   Number of wires:                622
   Number of wire bits:            636
   Number of public wires:         142
   Number of public wire bits:     156
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                624
     sky130_fd_sc_hd__a21o_2        11
     sky130_fd_sc_hd__a21oi_2        3
     sky130_fd_sc_hd__a221o_2       16
     sky130_fd_sc_hd__a22o_2        49
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__and2_2         1
     sky130_fd_sc_hd__and3_2         4
     sky130_fd_sc_hd__and4_2         1
     sky130_fd_sc_hd__and4b_2        4
     sky130_fd_sc_hd__and4bb_2       5
     sky130_fd_sc_hd__buf_1        161
     sky130_fd_sc_hd__dfrtp_2       14
     sky130_fd_sc_hd__dfxtp_2      128
     sky130_fd_sc_hd__inv_2         17
     sky130_fd_sc_hd__mux2_2       136
     sky130_fd_sc_hd__nand2_2        7
     sky130_fd_sc_hd__nor2_2         7
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__nor4b_2        3
     sky130_fd_sc_hd__o211a_2       10
     sky130_fd_sc_hd__o21a_2         8
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__or2_2         12
     sky130_fd_sc_hd__or3_2          9
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__or4_2         10
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         1

   Chip area for module '\lifo': 6860.329600

62. Executing Verilog backend.
Dumping module `\lifo'.

Warnings: 12 unique messages, 12 total
End of script. Logfile hash: d5951d0124, CPU: user 1.42s system 0.03s, MEM: 31.50 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 60% 2x abc (2 sec), 11% 20x opt_expr (0 sec), ...
